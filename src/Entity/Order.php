<?php

declare(strict_types=1);

namespace MLocati\Nexi\Entity;

use MLocati\Nexi\Entity;

/*
 * WARNING: DO NOT EDIT THIS FILE
 * It has been generated automaticlly from a template.
 * Edit the template instead.
 */

/**
 * @see https://developer.nexi.it/en/api/get-orders#tab_response
 * @see https://developer.nexi.it/en/api/get-orders-orderId#tab_response
 * @see https://developer.nexi.it/en/api/post-orders-2steps-init#tab_body
 * @see https://developer.nexi.it/en/api/post-orders-2steps-payment#tab_body
 * @see https://developer.nexi.it/en/api/post-orders-3steps-init#tab_body
 * @see https://developer.nexi.it/en/api/post-orders-3steps-payment#tab_body
 * @see https://developer.nexi.it/en/api/post-orders-build#tab_body
 * @see https://developer.nexi.it/en/api/post-orders-card_verification#tab_body
 * @see https://developer.nexi.it/en/api/post-orders-hpp#tab_body
 * @see https://developer.nexi.it/en/api/post-orders-mit#tab_body
 * @see https://developer.nexi.it/en/api/post-orders-moto#tab_body
 * @see https://developer.nexi.it/en/api/post-orders-paybylink#tab_body
 * @see https://developer.nexi.it/en/api/post-orders-virtual_card#tab_body
 */
class Order extends Entity
{
    /**
     * Merchant order id, unique in the merchant domain.
     *
     * @required
     * Maximum length: 18
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example btid2384983
     */
    public function getOrderId(): ?string
    {
        return $this->_getString('orderId');
    }

    /**
     * Merchant order id, unique in the merchant domain.
     *
     * @required
     * Maximum length: 18
     *
     * @return $this
     *
     * @example btid2384983
     */
    public function setOrderId(string $value): self
    {
        return $this->_set('orderId', $value);
    }

    /**
     * Transaction amount in smallest currency unit. 50 EUR is represented as 5000 (2 decimals) 50 JPY is represented as 50 (0 decimals).
     *
     * @required
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example 3545
     */
    public function getAmount(): ?string
    {
        return $this->_getString('amount');
    }

    /**
     * Transaction amount in smallest currency unit. 50 EUR is represented as 5000 (2 decimals) 50 JPY is represented as 50 (0 decimals).
     *
     * @required
     *
     * @return $this
     *
     * @example 3545
     */
    public function setAmount(string $value): self
    {
        return $this->_set('amount', $value);
    }

    /**
     * Transaction currency in ISO 4217 code.
     *
     * @required
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example EUR
     */
    public function getCurrency(): ?string
    {
        return $this->_getString('currency');
    }

    /**
     * Transaction currency in ISO 4217 code.
     *
     * @required
     *
     * @return $this
     *
     * @example EUR
     */
    public function setCurrency(string $value): self
    {
        return $this->_set('currency', $value);
    }

    /**
     * Customer ID for this transaction.
     *
     * @optional
     * Maximum length: 27
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example mcid97295873
     */
    public function getCustomerId(): ?string
    {
        return $this->_getString('customerId');
    }

    /**
     * Customer ID for this transaction.
     *
     * @optional
     * Maximum length: 27
     *
     * @return $this
     *
     * @example mcid97295873
     */
    public function setCustomerId(?string $value): self
    {
        return $value === null ? $this->_unset('customerId') : $this->_set('customerId', $value);
    }

    /**
     * Transaction description.
     *
     * @optional
     * Maximum length: 255
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example TV 3423
     */
    public function getDescription(): ?string
    {
        return $this->_getString('description');
    }

    /**
     * Transaction description.
     *
     * @optional
     * Maximum length: 255
     *
     * @return $this
     *
     * @example TV 3423
     */
    public function setDescription(?string $value): self
    {
        return $value === null ? $this->_unset('description') : $this->_set('description', $value);
    }

    /**
     * Additional transaction description.
     *
     * @optional
     * Maximum length: 255
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example weekend promotion
     */
    public function getCustomField(): ?string
    {
        return $this->_getString('customField');
    }

    /**
     * Additional transaction description.
     *
     * @optional
     * Maximum length: 255
     *
     * @return $this
     *
     * @example weekend promotion
     */
    public function setCustomField(?string $value): self
    {
        return $value === null ? $this->_unset('customField') : $this->_set('customField', $value);
    }

    /**
     * Object containing the customer detail. Sending the content of this object increases the security level of the transaction, thus increasing the probability that two-factor authentication will not be requested in the payment.
     *
     * @required in request of createOrderForMotoPayment
     * @optional in other cases
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     */
    public function getCustomerInfo(): ?CustomerInfo
    {
        return $this->_getEntity('customerInfo', CustomerInfo::class);
    }

    /**
     * @see \MLocati\Nexi\Entity\Order::getCustomerInfo()
     */
    public function getOrCreateCustomerInfo(): CustomerInfo
    {
        $result = $this->getCustomerInfo();
        if ($result === null) {
            $this->setCustomerInfo($result = new CustomerInfo());
        }

        return $result;
    }

    /**
     * Object containing the customer detail. Sending the content of this object increases the security level of the transaction, thus increasing the probability that two-factor authentication will not be requested in the payment.
     *
     * @required in request of createOrderForMotoPayment
     * @optional in other cases
     *
     * @return $this
     */
    public function setCustomerInfo(?CustomerInfo $value): self
    {
        return $value === null ? $this->_unset('customerInfo') : $this->_set('customerInfo', $value);
    }

    /**
     * Array containing the transaction summary.
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @return \MLocati\Nexi\Entity\TransactionSummary[]|null
     */
    public function getTransactionSummary(): ?array
    {
        return $this->_getEntityArray('transactionSummary', TransactionSummary::class);
    }

    /**
     * Array containing the transaction summary.
     *
     * @param \MLocati\Nexi\Entity\TransactionSummary[]|null $value
     *
     * @optional
     *
     * @return $this
     */
    public function setTransactionSummary(?array $value): self
    {
        return $value === null ? $this->_unset('transactionSummary') : $this->_setEntityArray('transactionSummary', TransactionSummary::class, $value);
    }

    /**
     * Facility T&C identifier array. Insertion of terms and conditions
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @return string[]|null
     */
    public function getTermsAndConditionsIds(): ?array
    {
        return $this->_getStringArray('termsAndConditionsIds');
    }

    /**
     * Facility T&C identifier array. Insertion of terms and conditions
     *
     * @param string[]|null $value
     *
     * @optional
     *
     * @return $this
     */
    public function setTermsAndConditionsIds(?array $value): self
    {
        return $value === null ? $this->_unset('termsAndConditionsIds') : $this->_setStringArray('termsAndConditionsIds', $value);
    }

    /**
     * {@inheritdoc}
     *
     * @see \MLocati\Nexi\Entity::getRequiredFields()
     */
    protected function getRequiredFields(): array
    {
        return [
            'orderId' => true,
            'amount' => true,
            'currency' => true,
            'customerInfo' => [
                'createOrderForMotoPayment' => 'request',
            ],
        ];
    }
}
