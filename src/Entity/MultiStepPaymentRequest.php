<?php

declare(strict_types=1);

namespace MLocati\Nexi\Entity;

use MLocati\Nexi\Entity;

/*
 * WARNING: DO NOT EDIT THIS FILE
 * It has been generated automaticlly from a template.
 * Edit the template instead.
 */

/**
 * @see https://developer.nexi.it/en/api/post-orders-2steps-payment
 * @see https://developer.nexi.it/en/api/post-orders-3steps-payment
 */
class MultiStepPaymentRequest extends Entity
{
    /**
     * Identifier of the payment pending.
     *
     * @required
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example 3470744
     */
    public function getOperationId(): ?string
    {
        return $this->_getString('operationId');
    }

    /**
     * Identifier of the payment pending.
     *
     * @required
     *
     * @return $this
     *
     * @example 3470744
     */
    public function setOperationId(string $value): self
    {
        return $this->_set('operationId', $value);
    }

    /**
     * Object containing the detail of the order.
     *
     * @required
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     */
    public function getOrder(): ?Order
    {
        return $this->_getEntity('order', Order::class);
    }

    /**
     * @see \MLocati\Nexi\Entity\MultiStepPaymentRequest::getOrder()
     */
    public function getOrCreateOrder(): Order
    {
        $result = $this->getOrder();
        if ($result === null) {
            $this->setOrder($result = new Order());
        }

        return $result;
    }

    /**
     * Object containing the detail of the order.
     *
     * @required
     *
     * @return $this
     */
    public function setOrder(Order $value): self
    {
        return $this->_set('order', $value);
    }

    /**
     * Object containing the details of the payment card.
     *
     * @required
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     */
    public function getCard(): ?Card
    {
        return $this->_getEntity('card', Card::class);
    }

    /**
     * @see \MLocati\Nexi\Entity\MultiStepPaymentRequest::getCard()
     */
    public function getOrCreateCard(): Card
    {
        $result = $this->getCard();
        if ($result === null) {
            $this->setCard($result = new Card());
        }

        return $result;
    }

    /**
     * Object containing the details of the payment card.
     *
     * @required
     *
     * @return $this
     */
    public function setCard(Card $value): self
    {
        return $this->_set('card', $value);
    }

    /**
     * Object containing the detail of the occurrence.
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     */
    public function getRecurrence(): ?Recurrence
    {
        return $this->_getEntity('recurrence', Recurrence::class);
    }

    /**
     * @see \MLocati\Nexi\Entity\MultiStepPaymentRequest::getRecurrence()
     */
    public function getOrCreateRecurrence(): Recurrence
    {
        $result = $this->getRecurrence();
        if ($result === null) {
            $this->setRecurrence($result = new Recurrence());
        }

        return $result;
    }

    /**
     * Object containing the detail of the occurrence.
     *
     * @optional
     *
     * @return $this
     */
    public function setRecurrence(?Recurrence $value): self
    {
        return $value === null ? $this->_unset('recurrence') : $this->_set('recurrence', $value);
    }

    /**
     * NO_PREFERENCE, CHALLENGE_REQUESTED
     *
     * @default NO_PREFERENCE
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example NO_PREFERENCE
     */
    public function getExemptions(): ?string
    {
        return $this->_getString('exemptions');
    }

    /**
     * NO_PREFERENCE, CHALLENGE_REQUESTED
     *
     * @default NO_PREFERENCE
     *
     * @optional
     *
     * @return $this
     *
     * @example NO_PREFERENCE
     */
    public function setExemptions(?string $value): self
    {
        return $value === null ? $this->_unset('exemptions') : $this->_set('exemptions', $value);
    }

    /**
     * Overwrites the default confirmation method of the terminal, for card payments only:
     * * IMPLICIT - automatic confirmation
     * * EXPLICIT - authorization only
     * Default value depends on the terminal configuration.
     * 1. Terminal set to EXPLICIT:
     * a. if the captureType is EXPLICIT the capture will be EXPLICIT
     * b. if the captureType is null the capture will be EXPLICIT
     * c. if the captureType is IMPLICIT the capture will be IMPLICIT
     * 2. Terminal set to IMPLICIT:
     * a. if the captureType is EXPLICIT the capture will be an error
     * b. if the captureType is null the capture will be IMPLICIT
     * c. if the captureType is IMPLICIT the capture will be IMPLICIT
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example EXPLICIT
     */
    public function getCaptureType(): ?string
    {
        return $this->_getString('captureType');
    }

    /**
     * Overwrites the default confirmation method of the terminal, for card payments only:
     * * IMPLICIT - automatic confirmation
     * * EXPLICIT - authorization only
     * Default value depends on the terminal configuration.
     * 1. Terminal set to EXPLICIT:
     * a. if the captureType is EXPLICIT the capture will be EXPLICIT
     * b. if the captureType is null the capture will be EXPLICIT
     * c. if the captureType is IMPLICIT the capture will be IMPLICIT
     * 2. Terminal set to IMPLICIT:
     * a. if the captureType is EXPLICIT the capture will be an error
     * b. if the captureType is null the capture will be IMPLICIT
     * c. if the captureType is IMPLICIT the capture will be IMPLICIT
     *
     * @optional
     *
     * @return $this
     *
     * @example EXPLICIT
     */
    public function setCaptureType(?string $value): self
    {
        return $value === null ? $this->_unset('captureType') : $this->_set('captureType', $value);
    }

    /**
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     */
    public function getThreeDSAuthData(): ?ThreeDSAuthData
    {
        return $this->_getEntity('threeDSAuthData', ThreeDSAuthData::class);
    }

    /**
     * @see \MLocati\Nexi\Entity\MultiStepPaymentRequest::getThreeDSAuthData()
     */
    public function getOrCreateThreeDSAuthData(): ThreeDSAuthData
    {
        $result = $this->getThreeDSAuthData();
        if ($result === null) {
            $this->setThreeDSAuthData($result = new ThreeDSAuthData());
        }

        return $result;
    }

    /**
     * @optional
     *
     * @return $this
     */
    public function setThreeDSAuthData(?ThreeDSAuthData $value): self
    {
        return $value === null ? $this->_unset('threeDSAuthData') : $this->_set('threeDSAuthData', $value);
    }

    /**
     * {@inheritdoc}
     *
     * @see \MLocati\Nexi\Entity::getRequiredFields()
     */
    protected function getRequiredFields(): array
    {
        return [
            'operationId' => true,
            'order' => true,
            'card' => true,
        ];
    }
}
