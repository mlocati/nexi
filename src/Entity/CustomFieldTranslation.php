<?php

declare(strict_types=1);

namespace MLocati\Nexi\Entity;

use MLocati\Nexi\Entity;

/*
 * WARNING: DO NOT EDIT THIS FILE
 * It has been generated automaticlly from a template.
 * Edit the template instead.
 */

/**
 * @see https://developer.nexi.it/en/api/get-custom_fields-customFieldId#tab_response
 * @see https://developer.nexi.it/en/api/get-structures#tab_response
 * @see https://developer.nexi.it/en/api/get-structures-structureId#tab_response
 * @see https://developer.nexi.it/en/api/post-custom_fields#tab_body
 * @see https://developer.nexi.it/en/api/post-structures#tab_body
 */
class CustomFieldTranslation extends Entity
{
    /**
     * Language to be used on the transaction summary details, ISO 639-2.
     *
     * @optional
     * Minimum length: 3
     * Maximum length: 3
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example ENG
     */
    public function getLanguage(): ?string
    {
        return $this->_getString('language');
    }

    /**
     * Language to be used on the transaction summary details, ISO 639-2.
     *
     * @optional
     * Minimum length: 3
     * Maximum length: 3
     *
     * @return $this
     *
     * @example ENG
     */
    public function setLanguage(?string $value): self
    {
        return $value === null ? $this->_unset('language') : $this->_set('language', $value);
    }

    /**
     * Label of the field.
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example Pets
     */
    public function getLabel(): ?string
    {
        return $this->_getString('label');
    }

    /**
     * Label of the field.
     *
     * @optional
     *
     * @return $this
     *
     * @example Pets
     */
    public function setLabel(?string $value): self
    {
        return $value === null ? $this->_unset('label') : $this->_set('label', $value);
    }

    /**
     * {@inheritdoc}
     *
     * @see \MLocati\Nexi\Entity::getRequiredFields()
     */
    protected function getRequiredFields(): array
    {
        return [
        ];
    }
}
