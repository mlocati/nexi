<?php

declare(strict_types=1);

namespace MLocati\Nexi\Entity\FindReservations;

use MLocati\Nexi\Entity;

/*
 * WARNING: DO NOT EDIT THIS FILE
 * It has been generated automaticlly from a template.
 * Edit the template instead.
 */

/**
 * @see https://developer.nexi.it/en/api/get-reservations
 */
class Query extends Entity implements \MLocati\Nexi\Service\QueryEntityInterface
{
    use \MLocati\Nexi\Service\QueryEntityTrait;

    /**
     * Merchant reservation id
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example btid2384983
     */
    public function getReservationId(): ?string
    {
        return $this->_getString('reservationId');
    }

    /**
     * Merchant reservation id
     *
     * @optional
     *
     * @return $this
     *
     * @example btid2384983
     */
    public function setReservationId(?string $value): self
    {
        return $value === null ? $this->_unset('reservationId') : $this->_set('reservationId', $value);
    }

    /**
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     */
    public function getDateType(): ?string
    {
        return $this->_getString('dateType');
    }

    /**
     * @optional
     *
     * @return $this
     */
    public function setDateType(?string $value): self
    {
        return $value === null ? $this->_unset('dateType') : $this->_set('dateType', $value);
    }

    /**
     * Retrieve reservations created from this time. ISO 8601 format.
     *
     * @default one month before the current time
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example 2022-01-01T13:10:00.000Z
     */
    public function getFromTime(): ?string
    {
        return $this->_getString('fromTime');
    }

    /**
     * Retrieve reservations created from this time. ISO 8601 format.
     *
     * @default one month before the current time
     *
     * @optional
     *
     * @return $this
     *
     * @example 2022-01-01T13:10:00.000Z
     */
    public function setFromTime(?string $value): self
    {
        return $value === null ? $this->_unset('fromTime') : $this->_set('fromTime', $value);
    }

    /**
     * Retrieve reservations up to this time. ISO 8601 format. A maximum interval of one month is allowed.
     *
     * @default current time
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example 2022-01-02T00:00:00.000Z
     */
    public function getToTime(): ?string
    {
        return $this->_getString('toTime');
    }

    /**
     * Retrieve reservations up to this time. ISO 8601 format. A maximum interval of one month is allowed.
     *
     * @default current time
     *
     * @optional
     *
     * @return $this
     *
     * @example 2022-01-02T00:00:00.000Z
     */
    public function setToTime(?string $value): self
    {
        return $value === null ? $this->_unset('toTime') : $this->_set('toTime', $value);
    }

    /**
     * How many items to be returned in one search. For the next page For the next page to set "toTime" equal to the "lastOperationTime" value of the last record in previous search.
     *
     * @default 20
     *
     * @optional
     * Maximum: 500
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example 20
     */
    public function getMaxRecords(): ?int
    {
        return $this->_getInt('maxRecords');
    }

    /**
     * How many items to be returned in one search. For the next page For the next page to set "toTime" equal to the "lastOperationTime" value of the last record in previous search.
     *
     * @default 20
     *
     * @optional
     * Maximum: 500
     *
     * @return $this
     *
     * @example 20
     */
    public function setMaxRecords(?int $value): self
    {
        return $value === null ? $this->_unset('maxRecords') : $this->_set('maxRecords', $value);
    }

    /**
     * Ricerca per parametri aggiuntivi.
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     */
    public function getCustomField(): ?string
    {
        return $this->_getString('customField');
    }

    /**
     * Ricerca per parametri aggiuntivi.
     *
     * @optional
     *
     * @return $this
     */
    public function setCustomField(?string $value): self
    {
        return $value === null ? $this->_unset('customField') : $this->_set('customField', $value);
    }

    /**
     * Search by booking type, possible values:
     * - PREPAID_REFUNDABLE
     * - PREPAID_NOT_REFUNDABLE
     * - GUARANTEED_NOSHOW
     * - GUARANTEED_PENALTY
     * - BUNDLE
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     */
    public function getReservationType(): ?string
    {
        return $this->_getString('reservationType');
    }

    /**
     * Search by booking type, possible values:
     * - PREPAID_REFUNDABLE
     * - PREPAID_NOT_REFUNDABLE
     * - GUARANTEED_NOSHOW
     * - GUARANTEED_PENALTY
     * - BUNDLE
     *
     * @optional
     *
     * @return $this
     */
    public function setReservationType(?string $value): self
    {
        return $value === null ? $this->_unset('reservationType') : $this->_set('reservationType', $value);
    }

    /**
     * Search by structure name.
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     */
    public function getStructureName(): ?string
    {
        return $this->_getString('structureName');
    }

    /**
     * Search by structure name.
     *
     * @optional
     *
     * @return $this
     */
    public function setStructureName(?string $value): self
    {
        return $value === null ? $this->_unset('structureName') : $this->_set('structureName', $value);
    }

    /**
     * Search by customer name associated with the reservation.
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     */
    public function getCustomerNameReservation(): ?string
    {
        return $this->_getString('customerNameReservation');
    }

    /**
     * Search by customer name associated with the reservation.
     *
     * @optional
     *
     * @return $this
     */
    public function setCustomerNameReservation(?string $value): self
    {
        return $value === null ? $this->_unset('customerNameReservation') : $this->_set('customerNameReservation', $value);
    }

    /**
     * Ricerca per cognome cliente associato alla prenotazione.
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     */
    public function getCustomerSurnameReservation(): ?string
    {
        return $this->_getString('customerSurnameReservation');
    }

    /**
     * Ricerca per cognome cliente associato alla prenotazione.
     *
     * @optional
     *
     * @return $this
     */
    public function setCustomerSurnameReservation(?string $value): self
    {
        return $value === null ? $this->_unset('customerSurnameReservation') : $this->_set('customerSurnameReservation', $value);
    }
}
