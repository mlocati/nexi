<?php

declare(strict_types=1);

namespace MLocati\Nexi\Entity;

use MLocati\Nexi\Entity;

/*
 * WARNING: DO NOT EDIT THIS FILE
 * It has been generated automaticlly from a template.
 * Edit the template instead.
 */

/**
 * @see https://developer.nexi.it/en/api/get-contracts-customers-customerId#tab_response
 */
class Contract extends Entity
{
    /**
     * Contract ID.
     *
     * @optional
     * Minimum length: 1
     * Maximum length: 18
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example C2834987
     */
    public function getContractId(): ?string
    {
        return $this->_getString('contractId');
    }

    /**
     * Contract ID.
     *
     * @optional
     * Minimum length: 1
     * Maximum length: 18
     *
     * @return $this
     *
     * @example C2834987
     */
    public function setContractId(?string $value): self
    {
        return $value === null ? $this->_unset('contractId') : $this->_set('contractId', $value);
    }

    /**
     * * MIT_UNSCHEDULED - once the card has been tokenized, the merchant will carry out subsequent charges with an undefined frequency
     * * MIT_SCHEDULED - once the card has been tokenized, the merchant will carry out subsequent debits with a defined frequency (eg first of each month)
     * * CIT - the card is tokenized to allow the cardholder to make subsequent payments faster. Unlike MIT transactions, the merchant will not have the ability to make direct debits on these tokenized cards, as the subsequent CIT payment is subject to authentication (SCA) by the cardholder
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example MIT_UNSCHEDULED
     */
    public function getContractType(): ?string
    {
        return $this->_getString('contractType');
    }

    /**
     * * MIT_UNSCHEDULED - once the card has been tokenized, the merchant will carry out subsequent charges with an undefined frequency
     * * MIT_SCHEDULED - once the card has been tokenized, the merchant will carry out subsequent debits with a defined frequency (eg first of each month)
     * * CIT - the card is tokenized to allow the cardholder to make subsequent payments faster. Unlike MIT transactions, the merchant will not have the ability to make direct debits on these tokenized cards, as the subsequent CIT payment is subject to authentication (SCA) by the cardholder
     *
     * @optional
     *
     * @return $this
     *
     * @example MIT_UNSCHEDULED
     */
    public function setContractType(?string $value): self
    {
        return $value === null ? $this->_unset('contractType') : $this->_set('contractType', $value);
    }

    /**
     * Used with contractType MIT_SCHEDULED.
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example 2023-03-16
     */
    public function getContractExpiryDate(): ?string
    {
        return $this->_getString('contractExpiryDate');
    }

    /**
     * Used with contractType MIT_SCHEDULED.
     *
     * @optional
     *
     * @return $this
     *
     * @example 2023-03-16
     */
    public function setContractExpiryDate(?string $value): self
    {
        return $value === null ? $this->_unset('contractExpiryDate') : $this->_set('contractExpiryDate', $value);
    }

    /**
     * Used with contractType MIT_SCHEDULED. Number of days.
     *
     * @optional
     * Maximum length: 4
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example 120
     */
    public function getContractFrequency(): ?string
    {
        return $this->_getString('contractFrequency');
    }

    /**
     * Used with contractType MIT_SCHEDULED. Number of days.
     *
     * @optional
     * Maximum length: 4
     *
     * @return $this
     *
     * @example 120
     */
    public function setContractFrequency(?string $value): self
    {
        return $value === null ? $this->_unset('contractFrequency') : $this->_set('contractFrequency', $value);
    }

    /**
     * * CARD - Any card circuit
     * * APM - Alternative payment method
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example CARD
     */
    public function getPaymentMethod(): ?string
    {
        return $this->_getString('paymentMethod');
    }

    /**
     * * CARD - Any card circuit
     * * APM - Alternative payment method
     *
     * @optional
     *
     * @return $this
     *
     * @example CARD
     */
    public function setPaymentMethod(?string $value): self
    {
        return $value === null ? $this->_unset('paymentMethod') : $this->_set('paymentMethod', $value);
    }

    /**
     * one of the payment circuit values returned by the GET payment_methods web service VISA, MC, AMEX, DINERS, GOOGLE_PAY, APPLE_PAY, PAYPAL, BANCONTACT, BANCOMAT_PAY, MYBANK, PIS, AMAZON_PAY, ALIPAY etc.
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example VISA
     */
    public function getPaymentCircuit(): ?string
    {
        return $this->_getString('paymentCircuit');
    }

    /**
     * one of the payment circuit values returned by the GET payment_methods web service VISA, MC, AMEX, DINERS, GOOGLE_PAY, APPLE_PAY, PAYPAL, BANCONTACT, BANCOMAT_PAY, MYBANK, PIS, AMAZON_PAY, ALIPAY etc.
     *
     * @optional
     *
     * @return $this
     *
     * @example VISA
     */
    public function setPaymentCircuit(?string $value): self
    {
        return $value === null ? $this->_unset('paymentCircuit') : $this->_set('paymentCircuit', $value);
    }

    /**
     * Payment instrument information.
     *
     * @optional
     *
     * @throws \MLocati\Nexi\Exception\WrongFieldType
     *
     * @example ***6152
     */
    public function getPaymentInstrumentInfo(): ?string
    {
        return $this->_getString('paymentInstrumentInfo');
    }

    /**
     * Payment instrument information.
     *
     * @optional
     *
     * @return $this
     *
     * @example ***6152
     */
    public function setPaymentInstrumentInfo(?string $value): self
    {
        return $value === null ? $this->_unset('paymentInstrumentInfo') : $this->_set('paymentInstrumentInfo', $value);
    }
}
