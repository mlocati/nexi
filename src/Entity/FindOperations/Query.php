<?php

declare(strict_types=1);

namespace MLocati\Nexi\XPayWeb\Entity\FindOperations;

use MLocati\Nexi\XPayWeb\Entity;

/*
 * WARNING: DO NOT EDIT THIS FILE
 * It has been generated automaticlly from a template.
 * Edit the template instead.
 */

/**
 * @see https://developer.nexi.it/en/api/get-operations
 */
class Query extends Entity implements \MLocati\Nexi\XPayWeb\Service\QueryEntityInterface
{
    use \MLocati\Nexi\XPayWeb\Service\QueryEntityTrait;

    /**
     * Retrieve operations created from this time. ISO 8601 format. Example 2022-01-01T13:10:00.000Z.
     *
     * @optional
     *
     * @throws \MLocati\Nexi\XPayWeb\Exception\WrongFieldType
     *
     * @example 2022-01-01T13:10:00.000Z
     */
    public function getFromTime(): ?string
    {
        return $this->_getString('fromTime');
    }

    /**
     * Retrieve operations created from this time. ISO 8601 format. Example 2022-01-01T13:10:00.000Z.
     *
     * @optional
     *
     * @return $this
     *
     * @example 2022-01-01T13:10:00.000Z
     */
    public function setFromTime(?string $value): self
    {
        return $value === null ? $this->_unset('fromTime') : $this->_set('fromTime', $value);
    }

    /**
     * Retrieve operations up to this time. ISO 8601 format.
     *
     * @optional
     *
     * @throws \MLocati\Nexi\XPayWeb\Exception\WrongFieldType
     *
     * @example 2022-01-02T00:00:00.000Z
     */
    public function getToTime(): ?string
    {
        return $this->_getString('toTime');
    }

    /**
     * Retrieve operations up to this time. ISO 8601 format.
     *
     * @optional
     *
     * @return $this
     *
     * @example 2022-01-02T00:00:00.000Z
     */
    public function setToTime(?string $value): self
    {
        return $value === null ? $this->_unset('toTime') : $this->_set('toTime', $value);
    }

    /**
     * How many items to be returned in one search. For the next page to set toTime equal to the lastOperationTime value of the last record in previous search.
     *
     * @default 20
     *
     * @optional
     * Maximum: 500
     *
     * @throws \MLocati\Nexi\XPayWeb\Exception\WrongFieldType
     *
     * @example 20
     */
    public function getMaxRecords(): ?int
    {
        return $this->_getInt('maxRecords');
    }

    /**
     * How many items to be returned in one search. For the next page to set toTime equal to the lastOperationTime value of the last record in previous search.
     *
     * @default 20
     *
     * @optional
     * Maximum: 500
     *
     * @return $this
     *
     * @example 20
     */
    public function setMaxRecords(?int $value): self
    {
        return $value === null ? $this->_unset('maxRecords') : $this->_set('maxRecords', $value);
    }

    /**
     * It indicates the originating channel:
     * * ECOMMERCE - cardholder initiated operation through an online channel.
     * * POS - cardholder initiated operation through a physical POS.
     * * BACKOFFICE - merchant initiated operation. It includes post operations and MIT.
     *
     * @optional
     *
     * @throws \MLocati\Nexi\XPayWeb\Exception\WrongFieldType
     */
    public function getChannel(): ?string
    {
        return $this->_getString('channel');
    }

    /**
     * It indicates the originating channel:
     * * ECOMMERCE - cardholder initiated operation through an online channel.
     * * POS - cardholder initiated operation through a physical POS.
     * * BACKOFFICE - merchant initiated operation. It includes post operations and MIT.
     *
     * @optional
     *
     * @return $this
     */
    public function setChannel(?string $value): self
    {
        return $value === null ? $this->_unset('channel') : $this->_set('channel', $value);
    }

    /**
     * It indicates the purpose of the request:
     * - AUTHORIZATION - payment authorization.
     * - CAPTURE - capture of the authorized amount.
     * - VOID - reversal of an authorization.
     * - REFUND - refund of a captured amount.
     * - CANCEL - the rollback of an capture, refund.
     * - CARD_VERIFICATION - verify operation, without any charge, with the sole purpose of confirming the validity of the card data entered by the customer.
     * - NOSHOW - noshow operation (reserved for Disputeless service).
     * - INCREMENTAL - incremental operation (reserved for Disputeless service).
     * - DELAY_CHARGE - delay charge operation (reserved for the Disputeless service).
     *
     * @optional
     *
     * @throws \MLocati\Nexi\XPayWeb\Exception\WrongFieldType
     */
    public function getOperationType(): ?string
    {
        return $this->_getString('operationType');
    }

    /**
     * It indicates the purpose of the request:
     * - AUTHORIZATION - payment authorization.
     * - CAPTURE - capture of the authorized amount.
     * - VOID - reversal of an authorization.
     * - REFUND - refund of a captured amount.
     * - CANCEL - the rollback of an capture, refund.
     * - CARD_VERIFICATION - verify operation, without any charge, with the sole purpose of confirming the validity of the card data entered by the customer.
     * - NOSHOW - noshow operation (reserved for Disputeless service).
     * - INCREMENTAL - incremental operation (reserved for Disputeless service).
     * - DELAY_CHARGE - delay charge operation (reserved for the Disputeless service).
     *
     * @optional
     *
     * @return $this
     */
    public function setOperationType(?string $value): self
    {
        return $value === null ? $this->_unset('operationType') : $this->_set('operationType', $value);
    }

    /**
     * @optional
     *
     * @throws \MLocati\Nexi\XPayWeb\Exception\WrongFieldType
     */
    public function getCustomField(): ?string
    {
        return $this->_getString('customField');
    }

    /**
     * @optional
     *
     * @return $this
     */
    public function setCustomField(?string $value): self
    {
        return $value === null ? $this->_unset('customField') : $this->_set('customField', $value);
    }

    /**
     * {@inheritdoc}
     *
     * @see \MLocati\Nexi\XPayWeb\Entity::getRequiredFields()
     */
    protected function getRequiredFields(): array
    {
        return [
        ];
    }
}
