<?php

declare(strict_types=1);

namespace MLocati\Nexi\Dictionary;

use ReflectionClass;
use RuntimeException;

/*
 * WARNING: DO NOT EDIT THIS FILE
 * It has been generated automaticlly from a template.
 * Edit the template instead.
 */

/**
 * List of currencies supported by Nexi.
 */
class Currency
{
    /**
     * United Arab Emirates Dirham
     *
     * @var string
     */
    const ID_AED = 'AED';

    /**
     * Kwanza Angolan
     *
     * @var string
     */
    const ID_AOA = 'AOA';

    /**
     * Argentine Peso
     *
     * @var string
     */
    const ID_ARS = 'ARS';

    /**
     * Australian dollar
     *
     * @var string
     */
    const ID_AUD = 'AUD';

    /**
     * Manat Azerbaijani
     *
     * @var string
     */
    const ID_AZN = 'AZN';

    /**
     * Bosnia and Herzegovina convertible mark
     *
     * @var string
     */
    const ID_BAM = 'BAM';

    /**
     * New Bulgarian lev
     *
     * @var string
     */
    const ID_BGN = 'BGN';

    /**
     * Bahraini Dinar
     *
     * @var string
     */
    const ID_BHD = 'BHD';

    /**
     * Brazilian Real
     *
     * @var string
     */
    const ID_BRL = 'BRL';

    /**
     * Belarusian ruble
     *
     * @var string
     */
    const ID_BYN = 'BYN';

    /**
     * Belarusian ruble
     *
     * @var string
     */
    const ID_BYR = 'BYR';

    /**
     * Canadian dollar
     *
     * @var string
     */
    const ID_CAD = 'CAD';

    /**
     * Swiss franc
     *
     * @var string
     */
    const ID_CHF = 'CHF';

    /**
     * Chilean Peso
     *
     * @var string
     */
    const ID_CLP = 'CLP';

    /**
     * Chinese Renminbi (Yuan)
     *
     * @var string
     */
    const ID_CNY = 'CNY';

    /**
     * Colombian Peso
     *
     * @var string
     */
    const ID_COP = 'COP';

    /**
     * Czech crown
     *
     * @var string
     */
    const ID_CZK = 'CZK';

    /**
     * Danish krone
     *
     * @var string
     */
    const ID_DKK = 'DKK';

    /**
     * Egyptian lira
     *
     * @var string
     */
    const ID_EGP = 'EGP';

    /**
     * Euro
     *
     * @var string
     */
    const ID_EUR = 'EUR';

    /**
     * British pound (or pound sterling)
     *
     * @var string
     */
    const ID_GBP = 'GBP';

    /**
     * Gibraltar pound
     *
     * @var string
     */
    const ID_GIP = 'GIP';

    /**
     * Hong Kong dollar
     *
     * @var string
     */
    const ID_HKD = 'HKD';

    /**
     * Croatian Kuna
     *
     * @var string
     */
    const ID_HRK = 'HRK';

    /**
     * Hungarian Forint
     *
     * @var string
     */
    const ID_HUF = 'HUF';

    /**
     * Indian rupee
     *
     * @var string
     */
    const ID_INR = 'INR';

    /**
     * Icelandic krona
     *
     * @var string
     */
    const ID_ISK = 'ISK';

    /**
     * Jordanian Dinar
     *
     * @var string
     */
    const ID_JOD = 'JOD';

    /**
     * Japanese yen
     *
     * @var string
     */
    const ID_JPY = 'JPY';

    /**
     * South Korean Won
     *
     * @var string
     */
    const ID_KRW = 'KRW';

    /**
     * Kuwaiti Dinar
     *
     * @var string
     */
    const ID_KWD = 'KWD';

    /**
     * Tenge Kazakh
     *
     * @var string
     */
    const ID_KZT = 'KZT';

    /**
     * Lithuanian Lita
     *
     * @var string
     */
    const ID_LTL = 'LTL';

    /**
     * Latvian Lats
     *
     * @var string
     */
    const ID_LVL = 'LVL';

    /**
     * Macedonian denar
     *
     * @var string
     */
    const ID_MKD = 'MKD';

    /**
     * Mexican peso
     *
     * @var string
     */
    const ID_MXN = 'MXN';

    /**
     * Ringgit Malaysian
     *
     * @var string
     */
    const ID_MYR = 'MYR';

    /**
     * Naira Nigerian
     *
     * @var string
     */
    const ID_NGN = 'NGN';

    /**
     * Norwegian krone
     *
     * @var string
     */
    const ID_NOK = 'NOK';

    /**
     * Filipino Weight
     *
     * @var string
     */
    const ID_PHP = 'PHP';

    /**
     * Polish Zloty
     *
     * @var string
     */
    const ID_PLN = 'PLN';

    /**
     * Qatari Rial
     *
     * @var string
     */
    const ID_QAR = 'QAR';

    /**
     * New Romanian leu
     *
     * @var string
     */
    const ID_RON = 'RON';

    /**
     * Serbian Dinar
     *
     * @var string
     */
    const ID_RSD = 'RSD';

    /**
     * Russian ruble
     *
     * @var string
     */
    const ID_RUB = 'RUB';

    /**
     * Rial Saudi
     *
     * @var string
     */
    const ID_SAR = 'SAR';

    /**
     * Swedish krona
     *
     * @var string
     */
    const ID_SEK = 'SEK';

    /**
     * Singapore dollar
     *
     * @var string
     */
    const ID_SGD = 'SGD';

    /**
     * Thai Baht
     *
     * @var string
     */
    const ID_THB = 'THB';

    /**
     * New Turkish lira
     *
     * @var string
     */
    const ID_TRY = 'TRY';

    /**
     * New Taiwanese dollar
     *
     * @var string
     */
    const ID_TWD = 'TWD';

    /**
     * Ukrainian hryvnia
     *
     * @var string
     */
    const ID_UAH = 'UAH';

    /**
     * US dollar
     *
     * @var string
     */
    const ID_USD = 'USD';

    /**
     * Venezuelan Bolivar
     *
     * @var string
     */
    const ID_VEF = 'VEF';

    /**
     * Vietnamese Dong
     *
     * @var string
     */
    const ID_VND = 'VND';

    /**
     * South African Rand
     *
     * @var string
     */
    const ID_ZAR = 'ZAR';

    /**
     * @see https://plugins.trac.wordpress.org/browser/cartasi-x-pay/trunk/src/classes/Nexi/WC_Gateway_NPG_Currency.php?format=txt
     *
     * @private
     */
    const MOVE_DECIMALS = [
        self::ID_AED => 2,
        self::ID_AOA => 2,
        self::ID_ARS => 2,
        self::ID_AUD => 2,
        self::ID_AZN => 2,
        self::ID_BAM => 2,
        self::ID_BGN => 2,
        self::ID_BHD => 3,
        self::ID_BRL => 2,
        self::ID_BYN => 2,
        self::ID_BYR => 0,
        self::ID_CAD => 2,
        self::ID_CHF => 2,
        self::ID_CLP => 0,
        self::ID_CNY => 2,
        self::ID_COP => 2,
        self::ID_CZK => 2,
        self::ID_DKK => 2,
        self::ID_EGP => 2,
        self::ID_EUR => 2,
        self::ID_GBP => 2,
        self::ID_GIP => 2,
        self::ID_HKD => 2,
        self::ID_HRK => 2,
        self::ID_HUF => 2,
        self::ID_INR => 2,
        self::ID_ISK => 0,
        self::ID_JOD => 3,
        self::ID_JPY => 0,
        self::ID_KRW => 0,
        self::ID_KWD => 3,
        self::ID_KZT => 2,
        self::ID_LTL => 2,
        self::ID_LVL => 2,
        self::ID_MKD => 2,
        self::ID_MXN => 2,
        self::ID_MYR => 2,
        self::ID_NGN => 2,
        self::ID_NOK => 2,
        self::ID_PHP => 2,
        self::ID_PLN => 2,
        self::ID_QAR => 2,
        self::ID_RON => 2,
        self::ID_RSD => 2,
        self::ID_RUB => 2,
        self::ID_SAR => 2,
        self::ID_SEK => 2,
        self::ID_SGD => 2,
        self::ID_THB => 2,
        self::ID_TRY => 2,
        self::ID_TWD => 2,
        self::ID_UAH => 2,
        self::ID_USD => 2,
        self::ID_VEF => 2,
        self::ID_VND => 0,
        self::ID_ZAR => 2,
    ];

    /**
     * @return string[]
     */
    public function getAvailableIDs(): array
    {
        $result = [];
        $class = new ReflectionClass($this);
        foreach ($class->getConstants() as $name => $value) {
            if (strpos($name, 'ID_') === 0 && is_string($value)) {
                $result[] = $value;
            }
        }

        return $result;
    }

    /**
     * @param float|int|string $amount
     *
     * @throws \RuntimeException if $amount or $currency are not valid
     */
    public function formatDecimals($amount, string $currency): int
    {
        $map = $this::MOVE_DECIMALS;
        if (!isset($map[$currency])) {
            throw new RuntimeException('The currency is not valid');
        }

        return $this->moveDecimals($amount, $map[$currency]);
    }

    /**
     * @param float|int|string $amount
     *
     * @throws \RuntimeException if $amount or $currency are not valid
     */
    public function moveDecimals($amount, int $moveDecimals): int
    {
        if (!is_numeric($amount)) {
            throw new RuntimeException('The amount is not numeric');
        }
        if ($moveDecimals < 0) {
            throw new RuntimeException('The number of decimals to be rounded is not valid');
        }
        $amount = ltrim(rtrim((string) $amount, '.'), '+');
        if ($amount[0] === '-') {
            $sign = -1;
            $amount = substr($amount, 1);
        } else {
            $sign = 1;
        }

        return $sign * $this->doMoveDecimals($amount, $moveDecimals);
    }

    /**
     * @param string $amount a string containing a non-negative number
     */
    private function doMoveDecimals(string $amount, int $moveDecimals): int
    {
        $dotPosition = strpos($amount, '.');
        if ($moveDecimals === 0) {
            if ($dotPosition === false) {
                return (int) $amount;
            }

            return (int) round((float) $amount);
        }
        if ($dotPosition === false) {
            return (int) ($amount . str_repeat('0', $moveDecimals));
        }
        if ($dotPosition === 0) {
            $amount = '0' . $amount;
            $dotPosition++;
        }
        $amount = str_replace('.', '', $amount);
        $numDecimals = strlen($amount) - $dotPosition;
        $delta = $moveDecimals - $numDecimals;
        if ($delta === 0) {
            return (int) $amount;
        }
        if ($delta > 0) {
            return (int) ($amount . str_repeat('0', $delta));
        }
        $amount = round((int) $amount, $delta);

        return (int) substr((string) $amount, 0, $delta);
    }
}
